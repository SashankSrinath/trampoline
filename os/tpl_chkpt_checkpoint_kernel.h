/**
 * @file tpl_os_checkpoint_kernel.h
 *
 * @section descr File description
 *
 * Trampoline checkpointing os services header.
 *
 * @section copyright Copyright
 *
 * Trampoline RTOS
 *
 * Trampoline is copyright (c) CNRS, University of Nantes, Ecole Centrale de Nantes
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the GNU Public Licence V2.
 * Check the LICENSE file in the root directory of Trampoline
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 *
 */

#ifndef TPL_OS_CHECKPOINT_H
#define TPL_OS_CHECKPOINT_H

#include "tpl_os_kernel.h"

extern void tpl_save_checkpoint_dma(const uint16 buffer);
extern void tpl_load_checkpoint_dma(const uint16 buffer);

extern void tpl_save_checkpoint(void);
extern void tpl_load_checkpoint(void);

#define OS_START_SEC_CONST_16BIT
#include "tpl_memmap.h"
static CONST (sint16,OS_CONST) NO_CHECKPOINT = -1;
#define OS_STOP_SEC_CONST_16BIT
#include "tpl_memmap.h"

#define OS_START_SEC_VAR_NON_VOLATILE_16BIT
#include "tpl_memmap.h"
extern VAR (sint16,OS_VAR) tpl_checkpoint_buffer;
#define OS_STOP_SEC_VAR_NON_VOLATILE_16BIT
#include "tpl_memmap.h"

// Following lookup table calculated based on simulator experiments - exponential extrapolation 
#define OS_START_SEC_CONST_16BIT
#include "tpl_memmap.h"
// 20s interval
// static CONST(uint16,OS_CONST) lookup_time[528] = {1335, 667, 445, 333, 267, 222, 190, 166, 148, 133, 121, 111, 102, 95, 89, 83, 78, 74, 70, 66, 63, 60, 58, 55, 53, 51, 49, 47, 46, 44, 43, 41, 1296, 648, 432, 324, 259, 216, 185, 162, 144, 129, 117, 108, 99, 92, 86, 81, 76, 72, 68, 64, 61, 58, 56, 54, 51, 49, 48, 46, 44, 43, 41, 1258, 629, 419, 314, 251, 209, 179, 157, 139, 125, 114, 104, 96, 89, 83, 78, 74, 69, 66, 62, 59, 57, 54, 52, 50, 48, 46, 44, 43, 41, 1221, 610, 407, 305, 244, 203, 174, 152, 135, 122, 111, 101, 93, 87, 81, 76, 71, 67, 64, 61, 58, 55, 53, 50, 48, 46, 45, 43, 42, 1184, 592, 394, 296, 236, 197, 169, 148, 131, 118, 107, 98, 91, 84, 78, 74, 69, 65, 62, 59, 56, 53, 51, 49, 47, 45, 43, 42, 1148, 574, 382, 287, 229, 191, 164, 143, 127, 114, 104, 95, 88, 82, 76, 71, 67, 63, 60, 57, 54, 52, 49, 47, 45, 44, 42, 1113, 556, 371, 278, 222, 185, 159, 139, 123, 111, 101, 92, 85, 79, 74, 69, 65, 61, 58, 55, 53, 50, 48, 46, 44, 42, 1078, 539, 359, 269, 215, 179, 154, 134, 119, 107, 98, 89, 82, 77, 71, 67, 63, 59, 56, 53, 51, 49, 46, 44, 43, 1043, 521, 347, 260, 208, 173, 149, 130, 115, 104, 94, 86, 80, 74, 69, 65, 61, 57, 54, 52, 49, 47, 45, 43, 1009, 504, 336, 252, 201, 168, 144, 126, 112, 100, 91, 84, 77, 72, 67, 63, 59, 56, 53, 50, 48, 45, 43, 976, 488, 325, 244, 195, 162, 139, 122, 108, 97, 88, 81, 75, 69, 65, 61, 57, 54, 51, 48, 46, 44, 943, 471, 314, 235, 188, 157, 134, 117, 104, 94, 85, 78, 72, 67, 62, 58, 55, 52, 49, 47, 44, 910, 455, 303, 227, 182, 151, 130, 113, 101, 91, 82, 75, 70, 65, 60, 56, 53, 50, 47, 45, 879, 439, 293, 219, 175, 146, 125, 109, 97, 87, 79, 73, 67, 62, 58, 54, 51, 48, 46, 847, 423, 282, 211, 169, 141, 121, 105, 94, 84, 77, 70, 65, 60, 56, 52, 49, 47, 816, 408, 272, 204, 163, 136, 116, 102, 90, 81, 74, 68, 62, 58, 54, 51, 48, 785, 392, 261, 196, 157, 130, 112, 98, 87, 78, 71, 65, 60, 56, 52, 49, 755, 377, 251, 188, 151, 125, 107, 94, 83, 75, 68, 62, 58, 53, 50, 725, 362, 241, 181, 145, 120, 103, 90, 80, 72, 65, 60, 55, 51, 696, 348, 232, 174, 139, 116, 99, 87, 77, 69, 63, 58, 53, 667, 333, 222, 166, 133, 111, 95, 83, 74, 66, 60, 55, 639, 319, 213, 159, 127, 106, 91, 79, 71, 63, 58, 610, 305, 203, 152, 122, 101, 87, 76, 67, 61, 582, 291, 194, 145, 116, 97, 83, 72, 64, 555, 277, 185, 138, 111, 92, 79, 69, 528, 264, 176, 132, 105, 88, 75, 501, 250, 167, 125, 100, 83, 474, 237, 158, 118, 94, 448, 224, 149, 112, 422, 211, 140, 397, 198, 371};

// 20s interval with hibernation consumption
static CONST(uint16,OS_CONST) lookup_time[528] = {1347, 673, 449, 336, 269, 224, 192, 168, 149, 134, 122, 112, 103, 96, 89, 84, 79, 74, 70, 67, 64, 61, 58, 56, 53, 51, 49, 48, 46, 44, 43, 42, 1308, 654, 436, 327, 261, 218, 186, 163, 145, 130, 118, 109, 100, 93, 87, 81, 76, 72, 68, 65, 62, 59, 56, 54, 52, 50, 48, 46, 45, 43, 42, 1270, 635, 423, 317, 254, 211, 181, 158, 141, 127, 115, 105, 97, 90, 84, 79, 74, 70, 66, 63, 60, 57, 55, 52, 50, 48, 47, 45, 43, 42, 1233, 616, 411, 308, 246, 205, 176, 154, 137, 123, 112, 102, 94, 88, 82, 77, 72, 68, 64, 61, 58, 56, 53, 51, 49, 47, 45, 44, 42, 1196, 598, 398, 299, 239, 199, 170, 149, 132, 119, 108, 99, 92, 85, 79, 74, 70, 66, 62, 59, 56, 54, 52, 49, 47, 46, 44, 42, 1159, 579, 386, 289, 231, 193, 165, 144, 128, 115, 105, 96, 89, 82, 77, 72, 68, 64, 61, 57, 55, 52, 50, 48, 46, 44, 42, 1124, 562, 374, 281, 224, 187, 160, 140, 124, 112, 102, 93, 86, 80, 74, 70, 66, 62, 59, 56, 53, 51, 48, 46, 44, 43, 1088, 544, 362, 272, 217, 181, 155, 136, 120, 108, 98, 90, 83, 77, 72, 68, 64, 60, 57, 54, 51, 49, 47, 45, 43, 1054, 527, 351, 263, 210, 175, 150, 131, 117, 105, 95, 87, 81, 75, 70, 65, 62, 58, 55, 52, 50, 47, 45, 43, 1020, 510, 340, 255, 204, 170, 145, 127, 113, 102, 92, 85, 78, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 986, 493, 328, 246, 197, 164, 140, 123, 109, 98, 89, 82, 75, 70, 65, 61, 58, 54, 51, 49, 46, 44, 953, 476, 317, 238, 190, 158, 136, 119, 105, 95, 86, 79, 73, 68, 63, 59, 56, 52, 50, 47, 45, 921, 460, 307, 230, 184, 153, 131, 115, 102, 92, 83, 76, 70, 65, 61, 57, 54, 51, 48, 46, 888, 444, 296, 222, 177, 148, 126, 111, 98, 88, 80, 74, 68, 63, 59, 55, 52, 49, 46, 857, 428, 285, 214, 171, 142, 122, 107, 95, 85, 77, 71, 65, 61, 57, 53, 50, 47, 826, 413, 275, 206, 165, 137, 118, 103, 91, 82, 75, 68, 63, 59, 55, 51, 48, 795, 397, 265, 198, 159, 132, 113, 99, 88, 79, 72, 66, 61, 56, 53, 49, 765, 382, 255, 191, 153, 127, 109, 95, 85, 76, 69, 63, 58, 54, 51, 735, 367, 245, 183, 147, 122, 105, 91, 81, 73, 66, 61, 56, 52, 705, 352, 235, 176, 141, 117, 100, 88, 78, 70, 64, 58, 54, 676, 338, 225, 169, 135, 112, 96, 84, 75, 67, 61, 56, 647, 323, 215, 161, 129, 107, 92, 80, 71, 64, 58, 619, 309, 206, 154, 123, 103, 88, 77, 68, 61, 591, 295, 197, 147, 118, 98, 84, 73, 65, 564, 282, 188, 141, 112, 94, 80, 70, 536, 268, 178, 134, 107, 89, 76, 509, 254, 169, 127, 101, 84, 483, 241, 161, 120, 96, 456, 228, 152, 114, 430, 215, 143, 405, 202, 379};

//10s interval
// static CONST(uint16,OS_CONST) lookup_time[528] = {667, 333, 222, 166, 133, 111, 95, 83, 74, 66, 60, 55, 51, 47, 44, 41, 39, 37, 35, 33, 31, 30, 29, 27, 26, 25, 24, 23, 23, 22, 21, 20, 648, 324, 216, 162, 129, 108, 92, 81, 72, 64, 58, 54, 49, 46, 43, 40, 38, 36, 34, 32, 30, 29, 28, 27, 25, 24, 24, 23, 22, 21, 20, 629, 314, 209, 157, 125, 104, 89, 78, 69, 62, 57, 52, 48, 44, 41, 39, 37, 34, 33, 31, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 610, 305, 203, 152, 122, 101, 87, 76, 67, 61, 55, 50, 46, 43, 40, 38, 35, 33, 32, 30, 29, 27, 26, 25, 24, 23, 22, 21, 21, 592, 296, 197, 148, 118, 98, 84, 74, 65, 59, 53, 49, 45, 42, 39, 37, 34, 32, 31, 29, 28, 26, 25, 24, 23, 22, 21, 21, 574, 287, 191, 143, 114, 95, 82, 71, 63, 57, 52, 47, 44, 41, 38, 35, 33, 31, 30, 28, 27, 26, 24, 23, 22, 22, 21, 556, 278, 185, 139, 111, 92, 79, 69, 61, 55, 50, 46, 42, 39, 37, 34, 32, 30, 29, 27, 26, 25, 24, 23, 22, 21, 539, 269, 179, 134, 107, 89, 77, 67, 59, 53, 49, 44, 41, 38, 35, 33, 31, 29, 28, 26, 25, 24, 23, 22, 21, 521, 260, 173, 130, 104, 86, 74, 65, 57, 52, 47, 43, 40, 37, 34, 32, 30, 28, 27, 26, 24, 23, 22, 21, 504, 252, 168, 126, 100, 84, 72, 63, 56, 50, 45, 42, 38, 36, 33, 31, 29, 28, 26, 25, 24, 22, 21, 488, 244, 162, 122, 97, 81, 69, 61, 54, 48, 44, 40, 37, 34, 32, 30, 28, 27, 25, 24, 23, 22, 471, 235, 157, 117, 94, 78, 67, 58, 52, 47, 42, 39, 36, 33, 31, 29, 27, 26, 24, 23, 22, 455, 227, 151, 113, 91, 75, 65, 56, 50, 45, 41, 37, 35, 32, 30, 28, 26, 25, 23, 22, 439, 219, 146, 109, 87, 73, 62, 54, 48, 43, 39, 36, 33, 31, 29, 27, 25, 24, 23, 423, 211, 141, 105, 84, 70, 60, 52, 47, 42, 38, 35, 32, 30, 28, 26, 24, 23, 408, 204, 136, 102, 81, 68, 58, 51, 45, 40, 37, 34, 31, 29, 27, 25, 24, 392, 196, 130, 98, 78, 65, 56, 49, 43, 39, 35, 32, 30, 28, 26, 24, 377, 188, 125, 94, 75, 62, 53, 47, 41, 37, 34, 31, 29, 26, 25, 362, 181, 120, 90, 72, 60, 51, 45, 40, 36, 32, 30, 27, 25, 348, 174, 116, 87, 69, 58, 49, 43, 38, 34, 31, 29, 26, 333, 166, 111, 83, 66, 55, 47, 41, 37, 33, 30, 27, 319, 159, 106, 79, 63, 53, 45, 39, 35, 31, 29, 305, 152, 101, 76, 61, 50, 43, 38, 33, 30, 291, 145, 97, 72, 58, 48, 41, 36, 32, 277, 138, 92, 69, 55, 46, 39, 34, 264, 132, 88, 66, 52, 44, 37, 250, 125, 83, 62, 50, 41, 237, 118, 79, 59, 47, 224, 112, 74, 56, 211, 105, 70, 198, 99, 185};

#define OS_STOP_SEC_CONST_16BIT
#include "tpl_memmap.h"

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

FUNC(void, OS_CODE) tpl_hibernate_os_service(void);

FUNC(void, OS_CODE) tpl_restart_os_service(void);

FUNC(void, OS_CODE) tpl_chkpt_hibernate(void);

FUNC(void, OS_CODE) get_voltage_measurement(void);

FUNC(uint16, OS_CODE) make_prediction(void);

FUNC(uint16, OS_CODE) calculate_prediction(uint16);

FUNC(uint16, OS_CODE) linear_prediction(uint16);

FUNC(uint16, OS_CODE) approx_prediction(uint16);

#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

/* TPL_OS_CHECKPOINT_H */
#endif
/* End of file tpl_os_checkpoint_kernel.h */
